{"version":3,"names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","getBottomSpace","FAR_FAR_AWAY","Platform","OS","Touchable","route","_0","style","children","borderless","centered","rippleColor","rest","TouchableRipple","supported","disabled","undefined","SceneComponent","React","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","color","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","labelMaxFontSizeMultiplier","scale","animation","focusedKey","index","key","visibleAnim","useAnimatedValue","tabsAnims","useAnimatedValueArray","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","useLayout","loaded","setLoaded","useState","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","Animated","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","useIsKeyboardShown","onShow","onHide","prevNavigationState","useRef","current","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","dark","isDarkTheme","mode","backgroundColor","customBackground","elevation","StyleSheet","flatten","approxBackgroundColor","overlay","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","white","black","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","absoluteFill","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","item","iconContainer","iconWrapper","icon","badgeContainer","String","labelContainer","labelWrapper","label","SceneMap","scenes","withTheme","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"sources":["BottomNavigation.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                maxFontSizeMultiplier={\n                                  labelMaxFontSizeMultiplier\n                                }\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    height: BAR_HEIGHT,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"],"mappings":"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"}