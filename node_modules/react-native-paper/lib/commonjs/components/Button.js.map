{"version":3,"names":["Button","disabled","compact","mode","dark","loading","icon","color","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","React","useRef","Animated","Value","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","white","black","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform","withTheme"],"sources":["Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"],"mappings":"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"}