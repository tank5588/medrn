{"version":3,"names":["getAdornmentConfig","left","right","adornmentConfig","side","AdornmentSide","Left","adornment","Right","forEach","React","isValidElement","type","TextInputAffix","AdornmentType","Affix","TextInputIcon","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","InputMode","Outlined","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","key","testID"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"],"mappings":"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"}