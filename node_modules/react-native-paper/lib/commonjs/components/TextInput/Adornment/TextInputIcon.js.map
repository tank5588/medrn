{"version":3,"names":["ICON_SIZE","ICON_OFFSET","StyleContext","React","createContext","style","isTextInputFocused","forceFocus","IconAdornment","icon","topPosition","side","top","contextState","TextInputIcon","name","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","styles","container","iconButton","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"sources":["TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\nimport type { IconSource } from '../../Icon';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * Icon to show.\n   */\n  name: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon name=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  name,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        color={typeof color === 'function' ? color(isTextInputFocused) : color}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;AA+BO,MAAMA,SAAS,GAAG,EAAlB;;AACP,MAAMC,WAAW,GAAG,EAApB;;AAQA,MAAMC,YAAY,gBAAGC,cAAA,CAAMC,aAAN,CAAsC;EACzDC,KAAK,EAAE,EADkD;EAEzDC,kBAAkB,EAAE,KAFqC;EAGzDC,UAAU,EAAE,MAAM,CAAE;AAHqC,CAAtC,CAArB;;AAMA,MAAMC,aAOL,GAAG,QAAiE;EAAA,IAAhE;IAAEC,IAAF;IAAQC,WAAR;IAAqBC,IAArB;IAA2BL,kBAA3B;IAA+CC;EAA/C,CAAgE;EACnE,MAAMF,KAAK,GAAG;IACZO,GAAG,EAAEF,WADO;IAEZ,CAACC,IAAD,GAAQV;EAFI,CAAd;EAIA,MAAMY,YAAY,GAAG;IAAER,KAAF;IAASC,kBAAT;IAA6BC;EAA7B,CAArB;EAEA,oBACE,6BAAC,YAAD,CAAc,QAAd;IAAuB,KAAK,EAAEM;EAA9B,GAA6CJ,IAA7C,CADF;AAGD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,MAAMK,aAAa,GAAG,SAMT;EAAA,IANU;IACrBC,IADqB;IAErBC,OAFqB;IAGrBC,mBAHqB;IAIrBC,KAJqB;IAKrB,GAAGC;EALkB,CAMV;;EACX,MAAM;IAAEd,KAAF;IAASC,kBAAT;IAA6BC;EAA7B,IACJJ,cAAA,CAAMiB,UAAN,CAAiBlB,YAAjB,CADF;;EAGA,MAAMmB,uBAAuB,GAAGlB,cAAA,CAAMmB,WAAN,CAAkB,MAAM;IACtD,IAAIL,mBAAmB,IAAI,CAACX,kBAA5B,EAAgD;MAC9CC,UAAU;IACX;;IACDS,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO;EACR,CAL+B,EAK7B,CAACC,mBAAD,EAAsBV,UAAtB,EAAkCD,kBAAlC,EAAsDU,OAAtD,CAL6B,CAAhC;;EAOA,oBACE,6BAAC,iBAAD;IAAM,KAAK,EAAE,CAACO,MAAM,CAACC,SAAR,EAAmBnB,KAAnB;EAAb,gBACE,6BAAC,mBAAD;IACE,IAAI,EAAEU,IADR;IAEE,KAAK,EAAEQ,MAAM,CAACE,UAFhB;IAGE,IAAI,EAAEzB,SAHR;IAIE,OAAO,EAAEqB,uBAJX;IAKE,KAAK,EAAE,OAAOH,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACZ,kBAAD,CAAnC,GAA0DY;EALnE,GAMMC,IANN,EADF,CADF;AAYD,CA7BD;;AA8BAL,aAAa,CAACY,WAAd,GAA4B,gBAA5B;AAEAZ,aAAa,CAACa,YAAd,GAA6B;EAC3BV,mBAAmB,EAAE;AADM,CAA7B;;AAIA,MAAMM,MAAM,GAAGK,uBAAA,CAAWC,MAAX,CAAkB;EAC/BL,SAAS,EAAE;IACTM,QAAQ,EAAE,UADD;IAETC,KAAK,EAAE/B,SAFE;IAGTgC,MAAM,EAAEhC,SAHC;IAITiC,cAAc,EAAE,QAJP;IAKTC,UAAU,EAAE;EALH,CADoB;EAQ/BT,UAAU,EAAE;IACVU,MAAM,EAAE;EADE;AARmB,CAAlB,CAAf;;eAaerB,a,EAEf"}