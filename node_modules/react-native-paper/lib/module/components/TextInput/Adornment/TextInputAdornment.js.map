{"version":3,"names":["React","TextInputIcon","IconAdornment","TextInputAffix","AffixAdornment","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","AdornmentSide","AdornmentType","InputMode","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","key","testID"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"],"mappings":"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"}