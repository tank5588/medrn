import _isNil from "lodash/isNil";
import _isUndefined from "lodash/isUndefined";
import _toLower from "lodash/toLower";
import _split from "lodash/split";
import _get from "lodash/get";
import React, { PureComponent } from 'react';
import { StyleSheet, TouchableOpacity } from 'react-native';
import memoize from 'memoize-one';
import { LogService } from "../../services";
import { Colors, BorderRadiuses } from "../../style";
import { forwardRef, asBaseComponent } from "../../commons/new";
import { extractAccessibilityProps } from "../../commons/modifiers";
import Badge from "../badge";
import View from "../view";
import Text from "../text";
import Image from "../image"; // @ts-ignore

import AnimatedImage from "../animatedImage";
import * as AvatarHelper from "../../helpers/AvatarHelper";
export let BadgePosition;

(function (BadgePosition) {
  BadgePosition["TOP_RIGHT"] = "TOP_RIGHT";
  BadgePosition["TOP_LEFT"] = "TOP_LEFT";
  BadgePosition["BOTTOM_RIGHT"] = "BOTTOM_RIGHT";
  BadgePosition["BOTTOM_LEFT"] = "BOTTOM_LEFT";
})(BadgePosition || (BadgePosition = {}));

const DEFAULT_BADGE_SIZE = 10;

/**
 * @description: Avatar component for displaying user profile images
 * @extends: TouchableOpacity, Image
 * @image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_1.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_2.png?raw=true
 * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AvatarsScreen.tsx
 */
class Avatar extends PureComponent {
  static displayName = 'Avatar';

  constructor(props) {
    super(props);
    this.styles = createStyles(props);

    if (props.imageSource) {
      LogService.warn('uilib: imageSource prop is deprecated, use source instead.');
    }
  }

  static defaultProps = {
    animate: false,
    size: 50,
    labelColor: Colors.$textDefault,
    badgePosition: BadgePosition.TOP_RIGHT
  };
  static badgePosition = BadgePosition;

  get source() {
    return this.props.source || this.props.imageSource;
  }

  getContainerStyle() {
    const {
      size
    } = this.props;
    return {
      width: size,
      height: size,
      alignItems: 'center',
      justifyContent: 'center',
      borderRadius: BorderRadiuses.br100
    };
  }

  getInitialsContainer() {
    return { ...StyleSheet.absoluteFillObject,
      alignItems: 'center',
      justifyContent: 'center',
      borderRadius: BorderRadiuses.br100
    };
  }

  getRibbonStyle() {
    const {
      size
    } = this.props;
    return {
      position: 'absolute',
      top: '10%',
      left: size / 1.7,
      borderRadius: size / 2
    };
  }

  getBadgeBorderWidth = () => _get(this.props, 'badgeProps.borderWidth', 0);

  getBadgeColor() {
    return _get(this.props, 'badgeProps.backgroundColor');
  }

  getBadgeSize = () => {
    return this.props?.badgeProps?.size || DEFAULT_BADGE_SIZE;
  };
  getBadgePosition = () => {
    const {
      size,
      badgePosition
    } = this.props;
    const radius = size / 2;
    const x = Math.sqrt(radius ** 2 * 2);
    const y = x - radius;
    const shift = Math.sqrt(y ** 2 / 2) - (this.getBadgeSize() + this.getBadgeBorderWidth() * 2) / 2;

    const badgeLocation = _split(_toLower(badgePosition), '_', 2);

    const badgeAlignment = {
      position: 'absolute',
      [badgeLocation[0]]: shift,
      [badgeLocation[1]]: shift
    };
    return badgeAlignment;
  };

  renderBadge() {
    const {
      testID,
      badgeProps
    } = this.props;

    if (badgeProps || this.getBadgeColor()) {
      return <Badge backgroundColor={this.getBadgeColor()} size={this.getBadgeSize()} testID={`${testID}.onlineBadge`} {...badgeProps} containerStyle={this.getBadgePosition()} />;
    }
  }

  renderRibbon() {
    const {
      ribbonLabel,
      ribbonStyle,
      ribbonLabelStyle,
      customRibbon
    } = this.props;

    if (ribbonLabel) {
      return customRibbon ? <View style={this.getRibbonStyle()}>{customRibbon}</View> : <View style={[this.getRibbonStyle(), this.styles.ribbon, ribbonStyle]}>
          <Text numberOfLines={1} text100 $textDefaultLight style={[ribbonLabelStyle]}>
            {ribbonLabel}
          </Text>
        </View>;
    }
  }

  renderImage() {
    const {
      animate,
      // @ts-ignore
      onImageLoadStart,
      onImageLoadEnd,
      onImageLoadError,
      testID,
      imageProps,
      imageStyle
    } = this.props;
    const hasImage = !_isUndefined(this.source);
    const ImageContainer = animate ? AnimatedImage : Image;

    if (hasImage) {
      return <ImageContainer animate={animate} style={[this.getContainerStyle(), StyleSheet.absoluteFillObject, imageStyle]} source={this.source} onLoadStart={onImageLoadStart} onLoadEnd={onImageLoadEnd} onError={onImageLoadError} testID={`${testID}.image`} containerStyle={this.getContainerStyle()} {...imageProps} />;
    }
  }

  getText = memoize((label, name) => {
    let text = label;

    if (_isNil(label) && !_isNil(name)) {
      text = AvatarHelper.getInitials(name);
    }

    return text;
  });

  get text() {
    const {
      label,
      name
    } = this.props;
    return this.getText(label, name);
  }

  getBackgroundColor = memoize((text, avatarColors, hashFunction, defaultColor) => {
    return AvatarHelper.getBackgroundColor(text, avatarColors, hashFunction, defaultColor);
  });

  get backgroundColor() {
    const {
      backgroundColor,
      useAutoColors,
      autoColorsConfig,
      name
    } = this.props;

    if (backgroundColor) {
      return backgroundColor;
    }

    const {
      avatarColors = AvatarHelper.getAvatarColors(),
      hashFunction = AvatarHelper.hashStringToNumber,
      defaultColor = Colors.$backgroundNeutralLight
    } = autoColorsConfig || {};

    if (useAutoColors) {
      return this.getBackgroundColor(name, avatarColors, hashFunction, defaultColor);
    } else {
      return defaultColor;
    }
  }

  render() {
    const {
      labelColor: color,
      onPress,
      containerStyle,
      children,
      size,
      testID,
      //@ts-ignore
      forwardedRef
    } = this.props;
    const Container = onPress ? TouchableOpacity : View;
    const hasImage = !_isUndefined(this.source);
    const fontSizeToImageSizeRatio = 0.32;
    const fontSize = size * fontSizeToImageSizeRatio;
    const text = this.text;
    return <Container style={[this.getContainerStyle(), containerStyle]} ref={forwardedRef} testID={testID} onPress={onPress} accessible={!_isUndefined(onPress)} accessibilityLabel={'Avatar'} accessibilityRole={onPress ? 'button' : 'image'} {...extractAccessibilityProps(this.props)}>
        <View testID={`${testID}.container`} style={[this.getInitialsContainer(), {
        backgroundColor: this.backgroundColor
      }, hasImage && this.styles.initialsContainerWithInset]}>
          {!_isUndefined(text) && <Text numberOfLines={1} style={[{
          fontSize
        }, this.styles.initials, {
          color
        }]} testID={`${testID}.label`}>
              {text}
            </Text>}
        </View>
        {this.renderImage()}
        {this.renderBadge()}
        {this.renderRibbon()}
        {children}
      </Container>;
  }

}

function createStyles(props) {
  const {
    labelColor
  } = props;
  const styles = StyleSheet.create({
    initialsContainerWithInset: {
      top: 1,
      right: 1,
      bottom: 1,
      left: 1
    },
    initials: {
      color: labelColor,
      backgroundColor: 'transparent',
      lineHeight: undefined
    },
    ribbon: {
      backgroundColor: Colors.$backgroundPrimaryHeavy,
      paddingHorizontal: 6,
      paddingVertical: 3
    }
  });
  return styles;
}

export { Avatar }; // For tests

export default asBaseComponent(forwardRef(Avatar));